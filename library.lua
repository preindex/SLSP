
Enum = ''
UserSettings = 'Returns the UserSettings object, which is used to read information from the current user’s game menu settings.'
_G = ''
_VERSION = ''
assert = 'Throws an error if the provided `value` is **false** or **nil**. If the assertion passes, it returns all values passed to it.'
bit32 = ''
bit32.arshift = 'Returns the number `x` shifted `disp` bits to the right. Negative displacements shift to the left.\n\nThis shift operation is what is called arithmetic shift. Vacant bits on the left are filled with copies of the higher bit of `x`; vacant bits on the right are filled with zeros.\n'
bit32.band = 'Returns the bitwise *and* of its operands.'
bit32.bnot = 'Returns the bitwise negation of `x`.\n\n```lua\nassert(bit32.bnot(x) == (-1 - x) % 2^32)\n```\n'
bit32.bor = 'Returns the bitwise *or* of its operands.'
bit32.btest = 'Returns a boolean signaling whether the bitwise *and* of its operands is different from zero.'
bit32.bxor = 'Returns the bitwise *exclusive or* of its operands.'
bit32.extract = 'Returns the unsigned number formed by the bits `field` to `field + width - 1` from `n`.'
bit32.lrotate = 'Returns the number `x` rotated `disp` bits to the left. Negative displacements rotate to the right.'
bit32.lshift = 'Returns the number `x` shifted `disp` bits to the left. The number `disp` may be any representable integer. Negative displacements shift to the right. In any direction, vacant bits are filled with zeros. In particular, displacements with absolute values higher than 31 result in zero (all bits are shifted out).'
bit32.replace = 'Returns a copy of `n` with the bits `field` to `field + width - 1` replaced by the value `v` .'
bit32.rrotate = 'Returns the number `x` rotated `disp` bits to the right. The number `disp` may be any representable integer.'
bit32.rshift = 'Returns the number `x` shifted `disp` bits to the right. Negative displacements shift to the left. In any direction, vacant bits are filled with zeros.\n\n```lua\nassert(bit32.rshift(b, disp) == math.floor(b % 2^32 / 2^disp))\n```\n'
coroutine = ''
coroutine.create = 'Creates a new coroutine.'
coroutine.isyieldable = 'Returns true when the running coroutine can yield.'
coroutine.resume = 'Starts or continues the execution of coroutine `co`.'
coroutine.running = 'Returns the running coroutine.'
coroutine.status = 'Returns the status of coroutine `co`.'
coroutine.wrap = 'Creates a new coroutine, with body `f`. Returns a function that resumes the coroutine each time it is called. Any arguments passed to the function behave as the extra arguments to resume. Returns the same values returned by resume, except the first boolean. In case of error, propagates the error.'
coroutine.yield = 'Suspends the execution of the calling coroutine. Any arguments to yield are passed as extra results to resume.'
debug = ''
debug.info = 'Allows programmatic inspection of the call stack.'
debug.profilebegin = 'Opens a microprofiler label.'
debug.profileend = 'Closes the top microprofiler label.'
debug.resetmemorycategory = 'Resets the memory category tag of the current thread to the default auto-assigned tag that was based on script name.' 
debug.setmemorycategory = 'Sets the memory category tag of the current thread. Future allocations performed by this thread will use this tag.'
debug.traceback = 'Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.'
delay = 'Schedules a function to be executed after ``delayTime`` seconds have passed, without yielding the current thread.'
elapsedTime = 'Returns how much time has elapsed since the current instance of Roblox was started.'
error = 'Terminates the last protected function called and returns message as the error object.'
game = ''
getfenv = 'Returns the current environment in use by the function. `target` can be a Lua function or a number that specifies the function at that stack level.'
getmetatable = 'Returns the metatable of the given object.'
ipairs = 'Returns three values: an iterator function, the table `t` and the number 0. Each time the iterator function is called, it returns the next numerical index-value pair in the table.'
loadstring = 'Loads Lua code from a string, and returns it as a function.'
math = ''
math.abs = 'Returns the absolute value of `x`.'
math.acos = 'Returns the arc cosine of `x` (in radians).'
math.asin = 'Returns the arc sine of `x` (in radians).'
math.atan = 'Returns the arc tangent of `x` (in radians).'
math.atan2 = 'Returns the arc tangent of `y/x` (in radians).'
math.ceil = 'Returns the smallest integral value larger than or equal to `x`.'
math.clamp = 'Returns a number between ``min`` and ``max``, inclusive.'
math.cos = 'Returns the cosine of `x` (assumed to be in radians).'
math.cosh = 'Returns the hyperbolic cosine of `x` (assumed to be in radians).'
math.deg = 'Converts the angle `x` from radians to degrees.'
math.exp = 'Returns the value `e^x` (where `e` is the base of natural logarithms).'
math.floor = 'Returns the largest integral value smaller than or equal to `x`.'
math.fmod = 'Returns the remainder of the division of `x` by `y` that rounds the quotient towards zero.'
math.frexp = 'Decompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).'
math.huge = 'A value larger than any other numeric value.'
math.ldexp = 'Returns `m * (2 ^ e)` .'
math.log = 'Returns the logarithm of `x` in the given base.'
math.log10 = 'Returns the base-10 logarithm of x.'
math.max = 'Returns the argument with the maximum value, according to the Lua operator `<`.'
math.min = 'Returns the argument with the minimum value, according to the Lua operator `<`.'
math.modf = 'Returns the integral part of `x` and the fractional part of `x`.'
math.noise = 'Returns a value between -0.5 and 0.5 generated from its arguments.'
math.pi = 'The value of *π*.'
math.pow = 'Returns `x ^ y` .'
math.rad = 'Converts the angle `x` from degrees to radians.'
math.random = '* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n'
math.randomseed = 'Sets `x` as the "seed" for the pseudo-random generator.'
math.round = 'Rounds ``x`` to the nearest integer; rounds away from zero if we\'re midway between two integers.'
math.sign = 'Returns -1 if ``x < 0``, 0 if ``x == 0``, or 1 if ``x > 0``.'
math.sin = 'Returns the sine of `x` (assumed to be in radians).'
math.sinh = 'Returns the hyperbolic sine of `x` (assumed to be in radians).'
math.sqrt = 'Returns the square root of `x`.'
math.tan = 'Returns the tangent of `x` (assumed to be in radians).'
math.tanh = 'Returns the hyperbolic tangent of `x` (assumed to be in radians).'
newproxy = 'Creates a blank userdata, with the option for it to have a metatable.'
next = 'Returns the first key/value pair in the array. If a `lastKey` argument was specified then returns the next element in the array based on the key that provided. The order in which the indices are enumerated is not specified, even for numeric indices.'
os = ''
os.clock = 'Returns an approximation of the amount in seconds of CPU time used by the program.'
os.date = 'Formats the given ``format`` with date/time information based on the given time, or if not provided, the value returned by ``os.time``.\n\nIf the provided `format` is exactly `"*t"` (local time) or `"!*t"` (UTC time), this function instead returns a dictionary.'
os.difftime = 'Returns the difference, in seconds, from time `t1` to time `t2`.'
os.time = 'Returns how many seconds have passed since the Unix epoch (1 January 1970, 00:00:00), under current UTC time. If provided a table formatted similarly to that returned by `os.date`, it will return the number of seconds since that time instead.'
pairs = 'Returns an iterator function, the passed table `t` and `nil`, so that the construction will iterate over all key/value pairs of that table when used in a generic for-loop.'
pcall = 'Calls function with the given arguments in protected mode.'
plugin = ''
print = 'Receives any number of arguments, and prints their values to the output.'
rawequal = 'Checks whether `v1` is equal to `v2`, without invoking the `__eq` metamethod.'
rawget = 'Returns the real value of `table[index]`, without invoking the `__index` metamethod.'
rawset = 'Sets the real value of `table[index]` to `value`, without invoking the `__newindex` metamethod.'
require = ''
script = ''
select = 'Returns all arguments after argument number `index`. If negative, it will return from the end of the argument list.'
setfenv = 'Sets the environment to be used by the given function. `target` can be a function or a number that specifies the function at that stack level.'
setmetatable = 'Sets the metatable for the given table.'
settings = 'Returns the GlobalSettings object, which can be used to access the settings objects that are used in Roblox Studio’s settings menu.'
shared = ''
spawn = 'Runs the specified callback function in a separate thread, without yielding the current thread.'
string = ''
string.byte = 'Returns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.'
string.char = 'Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.'
string.find = 'Looks for the first match of pattern in the string `s`. If it finds a match, then returns the indices of `s` where this occurrence starts and ends; otherwise, it returns nil.'
string.format = 'Returns a formatted version of its variable number of arguments following the description given in its first argument.'
string.gmatch = 'Returns an iterator function that, each time it is called, returns the next captures from pattern over the string `s`.'
string.gsub = 'Returns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` have been replaced by a replacement string specified by `repl`.'
string.len = 'Returns the length of `s`.'
string.lower = 'Returns a copy of this string with all uppercase letters changed to lowercase.'
string.match = 'Looks for the first match of `pattern` in the string.'
string.pack = 'Returns a binary string containing the arguments packed (that is, serialized in binary form) according to the format string `fmt`.'
string.packsize = 'Returns the size of a string resulting from `string.pack` with the given format.'
string.rep = 'Returns a string that is the concatenation of `n` copies of the string `s`.'
string.reverse = 'Returns a string that is the string `s` reversed.'
string.split = 'Splits a string into parts based on the defined separator character(s), returning a table of ordered results. The default separator is comma `,`.'
string.sub = 'Returns the substring of `s` that starts at `i` and continues until `j`; `i` and `j` can be negative. If `j` is absent, then it is assumed to be equal to -1 (which is the same as the string length).'
string.unpack = 'Returns the values packed in string according to the format string `fmt`. An optional pos marks where to start reading in `s` (default is 1). After the read values, this function also returns the index of the first unread byte in `s`.'
string.upper = 'Returns a copy of this string with all lowercase letters changed to uppercase.'
table = ''
table.clear = 'Clears all keys from the table, but leaves their capacity allocated so that future keys added to the table can re-use that storage, avoiding additional allocations.'
table.concat = 'Given an array where all elements are strings or numbers, returns the string `t[i] … sep … t[i+1] … sep … t[j]`. If `i` is greater than `j`, returns the empty string.'
table.create = 'Creates an array-like table with count values, initialized to `value`. When value is `nil` or omitted, the resulting table has length 0, but has preallocated storage for count elements.'
table.find = 'Returns the numeric index of the first occurence of value, starting from `init`, or nil if value isn\'t present in the table. The default for `init` is 1.'
table.foreach = 'Iterates over the provided table, passing the key and value of each iteration over to the provided function.'
table.foreachi = 'This is similar to ``table.foreach()`` except that index-value pairs are passed, not key-value pairs.'
table.getn = 'Returns the number of elements in the table passed.'
table.insert = 'Inserts element `value` at position `pos` in `t`.'
table.move = 'Moves elements from table `a1` to table `a2`.\n```lua\na2[t],··· = a1[f],···,a1[e]\nreturn a2\n```\n'
table.pack = 'Returns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `"n"` with the total number of arguments.'
table.remove = 'Removes from `t` the element at position `pos`, returning the value of the removed element.'
table.sort = 'Sorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.'
table.unpack = 'Returns the elements from the given list. his function is equivalent to:\n\n```lua\nreturn list[i], list[i+1], ···, list[j]\n```\n'
table.maxn = 'Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.'
table.freeze = 'Given a non-frozen table, freezes it such that all subsequent attempts to modify the table or assign its metatable raise an error. If the input table is already frozen or has a protected metatable, the function raises an error; otherwise it returns the input table.'
table.isfrozen = 'Returns `true` if the table is frozen, `false` otherwise.'
task.defer = 'Takes a thread or function and defers it until the next resumption cycle at which point it is resumed with the engine’s scheduler. Additional arguments are passed to the thread or function being resumed.'
task.spawn = 'Takes a thread or function and resumes it immediately through the engine’s scheduler. Additional arguments are passed to the thread or function being resumed.'
task.delay = 'Takes a thread or function and schedules it for resumption after the given amount of time has elapsed on the next Heartbeat step. The thread is resumed with built-in error handling and support for other engine features. Any additional arguments are passed to the thread or function being resumed.'
task.wait = 'Yields the current thread until the given duration (in seconds) has elapsed and then resumes the thread on the next Heartbeat step.'
tick = 'Returns how much time has elapsed, in seconds, since the UNIX epoch, on the current local session’s computer.'
time = 'Returns the amount of time, in seconds, that has elapsed since the current game instance started running. If the current game instance is not running, this will be 0'
tonumber = 'Tries to convert its argument to a number.'
tostring = 'Receives a value of any type and converts it to a string in a human-readable format.'
type = 'Returns the type of its only argument, coded as a string.'
typeof = 'Returns the type of the object specified, as a string. This function is more accurate than Lua’s native ``type`` function, as it does not denote Roblox-specific types as userdata.'
unpack = '-------\n```lua\nreturn list[i], list[i+1], ···, list[j]\n```\n'
utf8 = ''
utf8.char = 'Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.'
utf8.charpattern = 'The pattern which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.'
utf8.codepoint = 'Returns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).'
utf8.codes = '--------\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\n'
utf8.graphemes = 'Returns an iterator function so that\n```lua\nfor first, last in utf8.graphemes(str) do \n	local grapheme = s:sub(first, last) \n	-- body\nend\n```\nwill iterate the grapheme clusters of the string.\n'
utf8.len = 'Returns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).'
utf8.nfcnormalize = 'Converts the input string to Normal Form C, which tries to convert decomposed characters into composed characters.'
utf8.nfdnormalize = 'Converts the input string to Normal Form D, which tries to break up composed characters into decomposed characters.'
utf8.offset = 'Returns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.'
wait = 'Yields the current thread until the specified amount of ``seconds`` have elapsed.'
warn = 'Emits a warning with a message composed by the concatenation of all its arguments (which should be strings).'
workspace = ''
xpcall = 'Calls function `f` in protected mode with a new message handler.'

-- Exploit globals (Synapse X)
syn_websocket_close = 'Closes the connection with the websocket server.'
firesignal = 'Fires all the connections connected to the provided Signal.'
makefolder = 'Makes a folder.'
syn_io_append = 'Appends data to a file.'
is_protosmasher_caller = 'Checks whether or not the closure was made by the executor.'
clonefunction = 'Clones a function to a new address.'
setrawmetatable = 'Sets the raw metatable of a table.'
syn_mouse2press = 'Presses right click.'
debug.dumpheap = 'Saves the LuaU heap to a file.'
debug.getconstants = 'Returns all the constants of the function or level provided.'
debug.getproto = 'Returns all the protos of the function or level provided.'
debug.loadmodule = 'Returns the provided ModuleScript\'s executable closure that is ran on require.'
debug.getstack = 'Returns the function stack.'
debug.setmetatable = 'Sets the metatable for the given table.'
debug.getmetatable = 'Returns the metatable of the given object.'
debug.getupvalues = 'Returns all the upvalues in a function or a level.'
debug.getfenv = getfenv
debug.getupvalue = 'Returns the upvalue in the index provided in the function provided. May error if the index is not valid.'
debug.getlocal = 'Legacy function, and no longer works.'
debug.getconstant = 'Returns the constant in the index provided in the function provided. May error if the index is not valid.'
debug.setupvaluename = 'Legacy function, and no longer works.'
debug.getprotos = 'Returns all the protos in a function or a level.'
debug.setlocal = 'Legacy function, and no longer works.'
debug.setstack = 'Sets the value at the stack level and index.'
debug.getlocals = 'Legacy function, and no longer works.'
debug.getinfo = 'Allows programmatic inspection of the call stack.'
debug.setupvalue = 'Sets the upvalue at the index provided in the function provided.'
debug.setconstant = 'Sets the constant value at the index provided in the function provided.'
debug.getregistry = 'Returns the Lua Registry.'
debug.validlevel = 'Returns true if the given call-stack level (x) exists and false if not.'
hookmetamethod = 'Hooks the game\'s metamethod.'
checkparallel = 'Returns true if the functions is being ran in parallel; false if otherwise.'
syn_io_delfolder = 'Deletes the folder given.'
getrawmetatable = 'Gets the true metatable of a table.'
getinstancefromstate = 'Returns the instance or script that ran the thread. Returns nil if made by Synapse.'
syn_io_makefolder = 'Makes a folder with the name given.'
gethiddenprop = 'Returns a specific hidden property that is given.'
gethiddenprops = 'Returns the hidden properties of an Instance.'
getcallingscript = 'Returns the script calling the function this function is in.'
sethiddenprop = 'Sets the value of a hidden property of an objecy.'
getrenv = 'Returns the Roblox environment'
syn_decompile = 'Returns the decompiled source of a function or script if possible.'
get_instances = 'Returns all the instances in the game.'
newcclosure = 'Wraps a function in a C closure.'
gethiddenproperties = 'Returns all the hidden properties of an object.'
getspecialinfo = ''
isluau = 'Used to check if a game is LuaU. Since all games are LuaU, this always returns true.'
cloneref = 'Clones a reference to an instance.'
decompile = 'Returns the decompiled source of a function or script if possible.'
getprotos = 'Returns all the protos in a function or a level.'
syn_io_isfolder = 'Returns true if the folder exists and false if not.'
hookfunction = 'Hooks a function with the given function; returning the hooked function.'
isfile = 'Returns true if the given file exists or false if not.'
mouse2release = 'Releases the right mouse button.'
isrbxactive = 'Returns true if the current Roblox window is active (focused)'
rconsoleinfo = 'Prints an info message to the external roblox console.'
make_readonly = 'Sets the readonly state of a table.'
getstack = 'Returns the function stack.'
isconnectionenabled = 'Returns whether or not the connection given is enabled. '
unlockmodulescript = '"Unlocks" `module` such that code running at different contexts (e.g. level 2 vs level 7) return the same values when required.'
getupvalue = 'Returns the upvalue in the index provided in the function provided. May error if the index is not valid.'
syn_getgc = 'Returns all the objects passed through the last GC wave.'
syn_mouse2release = 'Releases the right mouse button.'
mouse1click = 'Clicks the left mouse button.'
syn_io_read = 'Reads a file from the given name.'
setupvalue = 'Sets the upvalue of an index of a function.'
syn_io_delfile = 'Deletes a file with the given name.'
gethiddenproperty = 'Returns the value of the property of the Instance given.'
identifyexecutor = 'Returns the (version) and name of an executor.'
getscripts = 'Returns all the scripts found in-game.'
rconsoleerr = 'Errors in the external console.'
getproperties = 'Returns the properties of an Instance.'
getprops = 'Returns the properties of an Instance.'
keypress = 'Presses the key given.'
syn_mousescroll = 'Scrolls the mouse by x amount of pixels.'
get_nil_instances = 'Returns all instances parented to nil.'
syn_getinstances = 'Returns all the instances in the game.'
syn_mouse1click = 'Clicks the left mouse button.'
get_scripts = 'Returns all the scripts in the game.'
rconsoleclear = 'Clers the external roblox console.'
getlocals = 'Legacy function, and no longer works.'
is_redirection_enabled = 'Returns whether or not the user has redirection enabled in the internal UI.'
syn_context_set = 'Sets the current thread identity.'
syn_isactive = 'Returns whether or not the roblox window is focused.'
syn_io_listdir = 'Lists all the files in exploit\'s workspace folder.'
isreadonly = 'Returns true if table is read-only, or false otherwise.'
getinstances = 'Returns all the instances.'
mouse2click = 'Clicks the right mouse button.'
getinfo = 'Allows programmatic inspection of the call stack.'
sethiddenproperty = 'Sets the value of a hidden property of an objecy.'
writefile = 'Writes data to a file.'
getnilinstances = 'Returns all the instances parented to nil.'
loadfile = 'Loads the given, similar to loadstring.'
bit = ''
bit.bdiv = 'Divides dividend by divisor, remainder is not returned.'
bit.badd = 'Adds the two given numbers, allows overflows.'
bit.rshift = 'Subtracts the two given numbers, allows overflows.'
bit.band = 'Performs bitwise AND on 2 or more integers.'
bit.bor = 'Performs bitwise OR on 2 or more integers.'
bit.bnot = 'Performs bitwise NOT on an integer.'
bit.bmul = 'Multiplies the two given numbers together, allows overflows.'
bit.bswap = 'Inverts `value`\'s endianness.'
bit.arshift = 'Performs an arthimetic shift right on `value` by `n` bits.'
bit.tobit = 'Converts `value` into proper form for bitwise operations.'
bit.ror = 'Rotates `value` right `n` bits.'
bit.rol = 'Rotates `value` left `n` bits.'
bit.lshift = 'Shifts `value` left by `n` bits.'
bit.tohex = 'Converts `value` to a hex string.'
bit.bxor = 'Performs bitwise XOR on 2 or more integers.'
bit.bsub = 'Subtracts 2 or more integers (from left to right).'
syn_websocket_connect = 'Connects to the websocket server given.'
syn = ''
syn.crypt = ''
crypt.encrypt = 'Encrypts a string using a key, selected algorithm, and nonce (or iv).'
crypt.lz4 = ''
lz4.compress = 'Compresses a string using the lz4 algorithm.'
crypt.custom = ''
custom.decrypt = ''
custom.hash = ''
custom.encrypt = ''
crypt.base64 = ''
base64.encode = 'Encodes the given string in Base64.'
base64.decode = 'Decodes the given string from Base64.'
crypt.decrypt = 'Decrypts a string using a key, selected algorithm, and nonce (or iv).'
crypt.derive = 'Dervices a secret key from a value with the length of the second parameter.'
crypt.random = 'Generates a random string with a user-given size.'
crypt.hash = 'Hashes a string with a specific algorithm.'
syn.get_comm_channel = 'Returns the communication channel using the ID given.'
syn.is_beta = 'Returns true if the user is using a beta version of Synapse.'
syn.secure_call = '[Deprecated] Spoofs the caller environment when calling a function in a script\'s environment.'
syn.cache_replace = 'Replaces the cache of an instance with another.'
syn.get_thread_identity = 'Returns the current thread identity.'
syn.request = 'Sends a http-request.'
syn.protect_gui = 'Protects an instance from petty detection methods.'
syn.run_secure_lua = 'Runs and loads a string made by Synapse X\'s secure lua function.'
syn.cache_invalidate = 'Invalidates the cache of an instance, forcing a new lookup.'
syn.queue_on_teleport = 'Code passed through this function will be executed when the player is teleported to a different place.'
syn.is_cached = 'Returns whether or not the given instance is cached.'
syn.run_on_actor = 'Runs a string of code on the actor passed.'
syn.create_comm_channel = 'Creates a communication channel and returns its ID so you can communicate between it and the main state'
syn.crypto = '' -- omg no way synapse crypto currency !?!?!?! (i know im very funny)
crypto.encrypt = ''
crypto.lz4 = ''
lz4.compress = 'Compresses a string using the lz4 algorithm.'
crypto.custom = ''
custom.decrypt = ''
custom.hash = ''
custom.encrypt = ''
crypto.base64 = ''
base64.encode = 'Encodes the given string from Base64.'
base64.decode = 'Decodes the given string from Base64.'
crypto.decrypt = 'Decrypts a string using a key, selected algorithm, and nonce (or iv).'
crypto.derive = 'Dervices a secret key from a value with the length of the second parameter.'
crypto.random = 'Generates a random string with a user-given size.'
crypto.hash = 'Hashes `data` with `algorithm`'
syn.write_clipboard = 'Sets your clipboard to the provided string.'
syn.on_actor_created = 'Allows you to listen for any new actors created.'
syn.websocket = ''
websocket.connect = 'Connects to the provided websocket server.'
syn.unprotect_gui = 'Unprotects a gui.'
syn.set_thread_identity = 'Sets the current thread identity'
setclipboard = 'Sets your clipboard the provided string.'
setfpscap = 'Sets the maximum amount of FPS.'
is_synapse_function = 'Returns whether or not the given function was made by Synapse.'
getactors = 'Returns all the actors in the game.'
firetouchinterest = 'Simulates a .Touched event. 0 = Fire, 1 = Un-fire'
getconnections = 'Returns all the connections to a given signal.'
checkcaller = 'Returns true if the call was made by the executor. False if otherwise.'
fireproximityprompt = 'Fires the proxmimity prompt given.'
getstates = 'Gets the states of ?'
syn_mouse1release = 'Releases the left mouse button.'
rconsoleprint = 'Prints a string to the external roblox console.'
setlocal = 'Legacy function, and no longer works.'
setreadonly = 'Sets the readonly state of a table.'
printconsole = 'Prints a string to the external roblox console.'
rconsolename = 'Sets the name of the external roblox console window.'
isactor = 'Returns whether or not the given instance is an actor.'
syn_getmenv = 'Returns the environment of a module.'
syn_crypt_encrypt = 'Encrypts a string.'
getconstant = 'Returns the constant of a function at the given index. May error if the index is not valid.'
messagebox = 'Makes a messagebox.'
syn_mouse1press = 'Presses the left mouse buttton.'
setconstant = 'Sets the constant of a function at the given index.'
validfgwindow = 'Returns true if the user is focused on the Roblox window.'
saveinstance = 'Saves the current place.'
getvirtualinputmanager = 'Returns the VirtualInputManager, used for simulating inputs.'
getconstants = 'Returns all the constants of the function or level provided.'
getloadedmodules = 'Returns all the loaded modules.'
syn_keypress = 'Presses a key given.'
isnetworkowner = 'Returns true if the user is the owner of the given part.'
syn_getsenv = 'Returns the environment of a script.'
Drawing = ''
Drawing.Fonts = ''
Fonts.UI = ''
Fonts.Monospace = ''
Fonts.Plex = ''
Fonts.System = ''
Drawing.new = 'Creates a new drwaing.'
delfile = 'Deletes the file given.'
mouse1release = 'Releases the left mouse button.'
get_loaded_modules = 'Gets all the loaded modules.'
setnamecallmethod = 'Sets the namecallmethod within metatable hooks.'
syn_getreg = 'Returns the Lua Registry'
syn_mousemoverel = 'Moves the mouse relative to the coordinates given/'
hookfunc = 'Hooks a function with another function. Returns the old function.'
replaceclosure = 'Replaces the closure of another function.'
syn_crypt_random = 'Generates a random string.'
get_calling_script = 'Returns the script calling the function/'
getnamecallmethod = 'Returns the namecallmethod within metatable hooks.'
isfolder = 'Checks whether or not a file exists and is a folder.'
delfolder = 'Deletes the folder given.'
getgenv = 'Returns the global (exploit) environment.'
syn_islclosure = 'Returns whether or not the given function is a lua closure.'
readfile = 'Reads a file from the workspace folder.'
getscripthash = 'Returns a script\'s bytecode hash'
mousescroll = 'Simulates a scroll forward or backward at the specified coordinates.'
mousemoveabs = 'Moves the mouse to the specified coordinates. If provided, `internal` specifies whether a mouse movement event is signalled internally or your physical mouse cursor is moved.\nIf not provided, `internal` is implied to be true if the game window is locked OR not active and false if otherwise.\nA physical mouse movement cannot occur when the game window is not in focus.\n'
getcallstack = 'Returns the entire callstack of a function.'
getproto = 'Returns the proto at the index of a function. May error if the proto doesn\'t exist.'
syn_crypt_hash = 'Hashes data using an algorithm.'
syn_websocket_send = 'Sends data over a websocket.'
is_protosmasher_closure = 'Returns whether or not the closure was made by the exploit.'
syn_checkcaller = 'Returns whether or not the function was called by Synapse.'
syn_mouse2click = 'Clicks the right mouse button.'
mousemoverel = 'Moves your mouse relative to the coordinates given.'
syn_io_isfile = 'Returns whether or not the given file exists.'
getscriptclosure = 'Returns the closure of a LocalScript.'
getpcdprop = 'Returns a `TriangleMeshPart`\'s `PhysicalConfigData` property.'
islclosure = 'Returns whether or not the given function is a lua closure.'
rconsolewarn = 'Warns an info message to the external roblox console.'
getstateenv = 'Returns the function enviroment of the state given.'
syn_clipboard_set = 'Sets your clipboard the provided string.'
syn_crypt_decrypt = 'Decrypts a string using a key, selected algorithm, and nonce (or iv).'
mouse2press = 'Presses right click.'
syn_crypt_derive = 'Dervices a secret key from a value with the length of the second parameter.'
readbinarystring = '' -- idk
mouse1press = 'Presses the left mouse buttton.'
syn_crypt_b64_decode = 'Decodes the given string in Base64.'
appendfile = 'Appends data to a file.'
syn_newcclosure = 'Wraps a function in a C closure.'
syn_getgenv = 'Returns the global exploit environment.'
is_lclosure = 'Returns whether or not a closure is of lua variety.'
getlocal = 'Legacy function, and no longer works.'
getgc = 'Returns all the objects passed through the last GC wave.'
syn_getrenv = 'Returns the Roblox environment'
getpointerfromstate = 'Returns a pointer when given a state.'
syn_crypt_b64_encode = 'Encodes the given string in Base64.'
isuntouched = 'Returns whether or not the current part is untouched.'
getsenv = 'Returns the environment of a script.'
syn_mousemoveabs = 'Move\'s your mouse to the x and y coordinates in pixels from topleft of the main window.'
rconsoleinputasync = '' -- no idea
setscriptable = 'Makes the property scriptable.'
make_writeable = 'Sets the readonly state of a table.'
fireclickdetector = 'Fires a click detector when given an instance that has one.'
syn_getloadedmodules = 'Returns all the loaded modules.'
rconsoleinput = 'Allows for user input in the external roblox console.'
getmenv = 'Returns the environment of a module.'
getreg = 'Returns the Lua Registry.'
syn_io_write = 'Writes data to a file.'
syn_getcallingscript = 'Returns the script calling the function this function is in.'
messageboxasync = '' -- no idea
getupvalues = 'Returns all the upvalues in a function or a level.'
iswindowactive = 'Returns true if the current Roblox window is active (focused)'
setstack = 'Sets the value at the stack level and index.'
syn_context_get = 'Returns the thread identity.'
syn_keyrelease = 'Simulates a key press for the specified KeyCode.'

syn.crypt.sign.keygen = 'Generates a new public & secret keypair, and returns it in that order.'
cansignalreplicate = 'Returns true if a signal can be replicated to the server'
isluaconnection = 'Returns true if `connection` represents a Lua connection.'
getconnectionthread = 'Returns a connection\'s associated thread. The connection must be a Lua connection.'
DrawingImmediate.Text = 'Draws text.'
worldtoscreen = 'Performs world to screen calculations on every `Vector3` or `BasePart` in `points` and returns the result as a table with matching keys. `offset` can be provided to offset every position.'
syn.crypt.sign.detached.create = 'Creates a signature for `data` with the `secret_key`, and returns the signature.'
debug.getcallstack = 'Returns a table with each index having fields for the `func` being executed at that call stack level, and the `currentline` if it is a Lua closure. Uses `t` instead of the callers thread if one is passed.'
setfflag = 'Sets FFlag `fflag` to `value`. Returns false if the flag doesn\'t exist or couldn\'t be set.'
issignalhooked = 'Returns true if `signal` is hooked.'
syn.crypt.hex.encode = 'Encodes `input` in hexadecimal.'
syn.crypt.hash = 'Hashes `data` with Blake2B. Optionally, you can pass `key` to create a 'keyed' hash, for which the hash will never be the same for different keys.'
unhooksignal = 'Unhooks a signal hooked with [hooksignal](#hooksignal).'
getsignalarguments = 'Returns a table of a signal\'s arguments\' types.'
syn.crypt.user.prompt.sign = 'Prompt equivalent to syn.crypt.user.sign.'
setwindowtitle = 'Sets the title of the game window. A wrapper around Microsoft\'s SetWindowTextA.'
syn.crypt.derive.key = 'Derives a cryptographic key from another `key` specified - `len` specifies the length of the generated key, `sub_key_id` is the index of the key to generate, and `context` is a 8-byte string that uniquely identifies the script that is generating this key.  The `context` string can be any 8 ASCII characters. Some examples are `SynapseX`, `MyScript`, and `_Script_`.  *Note* = Due to Lua\'s usage of 64 bit floating point numbers, the maximum safe integer to pass to `sub_key_id` is 2^52. Passing a larger number will result in undefined behavior.'
syn.crypt.seal.keygen = 'Generates a new public & secret keypair, and returns it in that order.'
DrawingImmediate.Line = 'Draws a line.'
lockwindow = 'Focuses and locks the game window. While locked, focus changes and input by the user are not seen by the game. Input can still be sent with the input API.'
getrendersteppedlist = 'Returns all callbacks bound with `RunService =BindToRenderStep`.'
saveplace = 'Equivalent to `saveinstance(game, options)`.'
clearconsole = 'Clears the internal and external consoles.'
geteventmember = 'Creates an unrestricted signal object for any event in `instance`. Useful for connecting to conventionally non-scriptable signals.'
iswindowlocked = 'Returns true if the game window is locked.'
unlockwindow = 'Unlocks the game window.'
appendfileasync = 'Appends to a file in the workspace folder asynchronously.'
restoreproto = 'TODO'
setcliprect = 'Defines or undefines the draw area (clip rectangle) for the given z-index.'
setconnectionenabled = 'Enables or disables a connection. Disabled connections remain connected, but do nothing when fired.'
iskeydown = 'Returns true if the specified virtual-key code is pressed and the game window is in focus and not locked.'
readfileasync = 'Reads a file from the workspace folder asynchronously.'
bit.bpopcount = 'Returns the number of set bits in `value`.'
getconnectionfunction = 'Returns a connection\'s associated function. The connection must be a non-waiting Lua connection.     **NOTE** = Arbitrary values can be passed to ` =Connect`.    In order to prevent accidental mishaps, this function will, by default, filter out any connected value that is not a function or a table with a `__call` metamethod. If ` =Connect` was passed table with a `__call` metamethod, the returned value will be the value of that metamethod, or nil if that value is not a function.  The optional second parameter will disable this behavior, and will just return whatever was passed to  =Connect.'
syn.crypt.custom.hash = 'Hashes `data` with `algorithm`.'
filtergc = 'Searches for values currently referenced by Lua that match the given criteria. `type` can either be \'function\' or \'table\'. Setting `return_one` indicates that this function should return the first result, or nil if there are no matches.'
syn.crypt.sign.detached.verify = 'Verifies the `data` passed in with the `public_key` and `signature`, and returns `true` if the verification succeeds. Returns `false` if verification fails.'
getcallbackmember = 'Returns the value of a callback property, such as `RemoteFunction.OnClientInvoke`.'
DrawingImmediate.Triangle = 'Draws a triangle.'
syn.crypt.lz4.compress = 'Compresses `data` with LZ4.'
DrawingImmediate.OutlinedText = 'Draws outlined text.'
syn.oth.hook = 'A secure version of `hookfunction` for C functions that works by running hook code on separate threads. When a hooked function is called, a new or cached hook thread is resumed with the `hook` and any passed arguments. The returned callback can be used to execute the original function on the original, calling thread.  In the context of a hook thread, the following functions behave as though being called under the original thread =   - getnamecallmethod  - setnamecallmethod  - checkcaller  - checkcallstack  - TODO '
DrawingImmediate.FilledQuad = 'Draws a filled quad.'
DrawingImmediate.Quad = 'Draws a quad.'
rconsoletop = 'Enables or disables the internal console window being topmost.'
DrawingImmediate.Rectangle = 'Draws a rectangle.'
DrawingImmediate.FilledTriangle = 'Draws a filled triangle.'
DrawingImmediate.GetPaint = 'Returns an event that is fired every render step for a specific z-index. Lower value `z_index` events will fire before higher value events. `DrawingImmediate.*` APIs can only be called under these events.'
DrawingImmediate.FilledCircle = 'Draws a filled circle.'
DrawingImmediate.Circle = 'Draws a circle.'
listfiles = 'Returns an array of file names belonging to `folder` or workspace if none is provided.'
syn.oth.get_root_callback = 'Returns a function that can be used to call the original function in the context of a hook thread. Useful for when a function is hooked multiple times and the callback you receive from `syn.oth.hook` executes the next hook in the chain, not the original function.'
syn.clear_teleport_queue = 'Removes all queued scripts from the teleport queue.'
syn.oth.unhook = 'Un-hooks a function hooked with `syn.oth.hook`. The second parameter is not required if the function has only been hooked once. Returns true upon success.'
syn.crypt.user.prompt.verify = 'Prompt equivalent to syn.crypt.user.verify.'
syn.crypt.custom.hmac = 'Creates a HMAC signature from `data` and `key` with `algorithm`.'
syn.crypt.custom.decrypt = 'Decrypts `ciphertext` with `key` using selected `cipher` and `iv/nonce`.'
syn.crypt.custom.encrypt = 'Encrypts `data` with `key` using selected `cipher` and `iv/nonce`.'
syn.crypt.sign.open = 'Verifies the `data` passed in with the `public_key`, and returns the original message if the verification succeeds. Errors if verification fails.'
syn.crypt.base64.decode = 'Base64 decodes `input`.'
iswaitingconnection = 'Returns true if `connection` is the result of a ` =Wait()` call.'
syn.crypt.sign.derive = 'TODO '
syn.crypt.seal.decrypt = 'Decrypts `data` with the `public_key` and `secret_key`.'
getsynasset = 'Returns a `Content` string that can be used with GUI elements, sounds, meshes, and etc. to refer to an asset in the workspace folder.  **Note =** Certain assets only work with certain file types. For example, `VideoFrame`s only work with .webm encoded videos.'
gethui = 'Returns a protected container where GUIs can be hidden from detection by the game.'
syn.crypt.sign.create = 'Creates a signature for `data` with the `secret_key`, and returns the signature combined with the message.'
syn.crypt.seal.derive = 'TODO '
hooksignal = 'Enables the interception of signal invocations. When `signal` is fired, `callback` is called for every _Lua_ connection in `signal` with an info table and the invocation arguments. Returning true from this callback fires the original connection. `hooksignal` cannot be used to intercept C (engine) connections or Lua connections belonging to CoreScripts.'
replicatesignal = 'Fires a signal on the server. Signal must be [replicable](#cansignalreplicate).'
syn.crypt.derive.password = 'Derives a cryptographic key from a user-entered `password`. Due to passwords usually being low-complexity and easy to crack, this function uses a *password hashing function* to achieve its goals.  In order to use this function, you must pass a 16-byte `salt`. You can generate this via `syn.crypt.random`.  Password hashing functions are deliberately slow - this is to make bruteforce attacks harder. The `mode` (or `opslimit`/`memlimit`) parameter allows you to specify how much security you want your derived key to have. You should choose the mode you wish to use based on how acceptable the wait for function completion is for your application, and what the security requirements for your application are.'
syn.trampoline_call = 'Proxy a call to a Lua function with the given call stack and thread options.'
setuntouched = 'Sets a Lua environment\'s untouched flag. This flag is relevant to certain Luau optimizations, namely built-ins. If true, built-in globals such as `game` or `print` are fetched from a cache and cannot be modified. If false, the cache is disabled and built-ins are fetched from the environment table as normal. Functions `getfenv` and `setfenv` set this flag to false implicitly.'
writefileasync = 'Writes to a file in the workspace folder asynchronously.'
syn.crypt.user.prompt.encrypt = 'Prompt equivalent to [syn.crypt.user.encrypt](syn.crypt.user.html#encrypt).'
syn.crypt.hex.decode = 'Decodes `input` in hexadecimal.'
getscriptthread = 'Returns the main Lua thread associated with `script`. Note that this may not be the only thread used!'
syn.crypt.base64.encode = 'Base64 encodes `input`.'
syn.crypt.random = 'Generates a random string with `size` (cannot be negative or exceed 1024).'
syn.crypt.hmac = 'Creates a HMAC signature from `data` and `key`. Note this is not the same as passing a `key` to the above function, and uses a different algorithm. libsodium authentication.'
keyclick = 'Simulates an instant key press + release for the specified KeyCode.'
keyrelease = 'Simulates a key press for the specified KeyCode.'
syn.crypt.decrypt = 'Decrypts `ciphertext` with `key`. The data (along with `additional_data` if it is passed) is also authenticated via a MAC before being returned. libsodium or the AEAD form if `additional_data` is passed, like above.'
makewritable = 'Equivalent to `setreadonly(table, false)`.'
getscripthash = 'Returns a script\'s bytecode hash.'
setwindowicon = 'Sets the icon of the game window.'
syn.toast_notification = 'Displays a toast notification in the internal UI.'
require = 'This function replaces the game\'s `require` to allow for requiring game modules from higher contexts of script execution, like the one in which Synapse scripts run.'
syn.crypt.user.sign = 'Signs `data` in a way that only the caller\'s Synapse X account can produce this signature. Equivalent to `syn.crypt.sign.detached.create` with a user-unique key.  You can verify data was signed with this method from a web request.'
mousemoverel = 'Moves the mouse relative to its current position. If provided, `internal` specifies whether a mouse movement event is signalled internally or your physical mouse cursor is moved. If not provided, `internal` is implied to be true if the game window is locked OR not active and false if otherwise. A physical mouse movement cannot occur when the game window is not in focus.'
restorefunction = 'Un-hooks a function hooked with hookfunction. NOTE = can only restore *one* level of a C function hook. Attempting to restore a C function that has been hooked twice will error.'
getscriptfunction = 'Returns the main function associated with `script`.'
hookproto = 'TODO'
setmousestate = 'Enables or disables the internal UI cursor.'
syn.oth.is_hook_thread = 'Returns true if this thread is a hook thread.'
createuitab = 'Creates a tab in the external UI'
getscriptbytecode = 'Returns `target`\'s bytecode. `target` cannot be a Synapse function.'
isgamescriptconnection = 'Returns true if `connection` represents a Lua connection created by game scripts (as opposed to core scripts).'
syn.crypt.user.prompt.decrypt = 'Prompt equivalent to syn.crypt.user.decrypt.'
getmousestate = 'Returns true if the internal UI cursor is enabled.'
iskeytoggled = 'Returns true if the specified virtual-key code is toggled (e.g. caps lock) and the game window is in focus and not locked.'
makereadonly = 'Equivalent to `setreadonly(table, true)`.'
setstackhidden = 'Hides or unhides a function from the callstack.'
getscriptname = 'Returns the name of a script when it was first loaded.'
getfunctionhash = 'Returns a Lua function\'s bytecode hash.'
syn.crypt.user.encrypt = 'Encrypts `data` in a way that only the caller\'s Synapse X account can decrypt it. You can also pass a `key` to add a secondary key to the encryption if you wish.  *Note* = If the user resets their Synapse X password, **the output of this function will not be decryptable anymore**. The user simply changing their password when they know their current one will **not** cause this to happen, however.  The `mode` parameter controls how the encryption works.  ### UserEncryptionMode | __Mode__ | __Note__ |---------|-----------| | `SynAccount` | Ties the encrypted data to the users Synapse X account. The data **is** decryptable on other machines if the pre-conditions stated above are met. | `WindowsAccount` | Ties the encrypted data to *both* the users Synapse X account and Windows account. The data is *only* decryptable if both the pre-conditions stated above are met and the user does not reset their Windows password. | `WindowsMachine` | Ties the encrypted data to *both* the users Synapse X account and Windows machine. The data is *only* decryptable if both the pre-conditions stated above are met and the user does not reset their Windows PC.'
issynapsefunction = 'Returns true if `f` is a Synapse function.'
checkcallstack = 'Returns true if the current thread is owned by Synapse AND _all_ functions at or above `level` in the call stack are Synapse functions. A level of `1` represents the function calling checkcallstack, `2` represents the function calling the function calling checkcallstack, and so forth.'
syn.crypt.seal.encrypt = 'Encrypts `data` with the `public_key`. The data can only be later decrypted via the secret key in the keypair.'
newtable = 'Creates a table with the specified array and hash sizes, then fills with random data. Random data for hash part has random vector keys with X, Y, and Z values between 0 and 1 and `false` as a value. Random data for array part has `false` as a value. This function is useful for creating tables with memory hidden to scripts. If you would like this feature, make sure `narray` is >= 33 and `nhash` is >= 17. NOTE = To prevent table reallocation from exposing this memory, make sure you don\'t have fewer array/hash values!'
DrawingImmediate.FilledRectangle = 'Draws a filled rectangle.'
getboundingbox = 'Calculates the bounding box of a list of parts and returns its position (as a CFrame, optionally transformed by `orientation`) and size.'
syn.crypt.user.decrypt = 'Decrypts `ciphertext` from the *Per-User Encrypt* function. You do not need to pass the `UserEncryptionMode` you used to encrypt this data, but you need to pass the `key` you used to encrypt the data if one was specified. The function will error if decryption fails.'
syn.crypt.user.verify = 'Verifies `data` was signed by the `syn.crypt.user.sign` function from the caller\'s Synapse X account. If you want to verify data signed by another user.'
issynapsethread = 'Returns true if `thread` is owned by Synapse.'